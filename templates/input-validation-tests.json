{
    "info": {
      "name": "Input Validation Tests Template",
      "description": "Template for reusable input validation test cases, including SQL and command injection scenarios.",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "name": "Test SQL Injection Prevention",
        "request": {
          "method": "GET",
          "header": [],
          "url": {
            "raw": "{{baseUrl}}/users?filter=' OR 1=1",
            "host": ["{{baseUrl}}"],
            "path": ["users"],
            "query": [
              { "key": "filter", "value": "' OR 1=1" }
            ]
          }
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "// Validate SQL injection attempt is blocked",
                "pm.test('SQL injection attempt blocked', function () {",
                "    pm.response.to.have.status(400);",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('error', 'Invalid filter');",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ]
      },
      {
        "name": "Test Command Injection Prevention",
        "request": {
          "method": "POST",
          "header": [
            { "key": "Content-Type", "value": "application/json" }
          ],
          "body": {
            "mode": "raw",
            "raw": "{ \"command\": \"; rm -rf /\" }"
          },
          "url": {
            "raw": "{{baseUrl}}/process/input",
            "host": ["{{baseUrl}}"],
            "path": ["process", "input"]
          }
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "// Validate command injection is blocked",
                "pm.test('Command injection attempt blocked', function () {",
                "    pm.response.to.have.status(400);",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('error', 'Invalid input');",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ]
      },
      {
        "name": "Test Input Sanitization",
        "request": {
          "method": "POST",
          "header": [
            { "key": "Content-Type", "value": "application/json" }
          ],
          "body": {
            "mode": "raw",
            "raw": "{ \"input\": \"<script>alert('xss')</script>\" }"
          },
          "url": {
            "raw": "{{baseUrl}}/process/input",
            "host": ["{{baseUrl}}"],
            "path": ["process", "input"]
          }
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "// Validate input sanitization",
                "pm.test('Input is sanitized', function () {",
                "    pm.response.to.have.status(200);",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData.cleanedInput).to.not.include('<script>');",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ]
      }
    ],
    "variable": [
      { "key": "baseUrl", "value": "https://example.com" }
    ]
  }
  